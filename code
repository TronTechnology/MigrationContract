// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface OldContract {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
}

contract MigrationContract {
    address public owner;
    OldContract public oldContract;
    mapping(address => uint256) public migratedBalances;
    
    event MigrationCompleted(address indexed user, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this operation");
        _;
    }

    modifier onlyValidAddress(address user) {
        require(user != address(0), "Invalid address");
        _;
    }

    constructor(address _oldContract) {
        owner = msg.sender;
        oldContract = OldContract(_oldContract);
    }

    // Function to migrate balances for a single user
    function migrateBalance(address user) external onlyOwner onlyValidAddress(user) {
        uint256 balance = oldContract.balanceOf(user);
        require(balance > 0, "No balance to migrate");
        
        // Store the migrated balance
        migratedBalances[user] = balance;

        // Trigger the migration in the old contract
        bool success = oldContract.transfer(address(this), balance);
        require(success, "Transfer from old contract failed");

        emit MigrationCompleted(user, balance);
    }

    // Function to withdraw migrated funds
    function withdrawMigratedBalance() external onlyValidAddress(msg.sender) {
        uint256 migratedBalance = migratedBalances[msg.sender];
        require(migratedBalance > 0, "No migrated balance available");

        // Reset balance to prevent re-entrancy attack
        migratedBalances[msg.sender] = 0;

        // Transfer the migrated balance to the user
        payable(msg.sender).transfer(migratedBalance);
    }

    // Fallback function to accept ether if needed (for example, for gas)
    receive() external payable {}
    
    // Function to withdraw contract balance (owner only)
    function withdrawFunds() external onlyOwner {
        payable(owner).transfer(address(this).balance);
    }
}
